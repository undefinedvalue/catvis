catjs.simulations = function() {
  var toStr = function(str) {
    return str;
  }

  var toDate = function(date) {
    return date && new Date(date).toLocaleString();
  };

  var toDataLink = function(url, name) {
    if (url) {
      return $('<a/>', {href: url, text: name});
    } else {
      return $('<span/>', {'class': 'no-data', text: name});
    }
  }

  // class, data key, header, conversion function
  var columns = [
    ['status', 'Status', 'Status', toStr],
    ['start-time', 'StartTime', 'Start Time', toDate],
    ['end-time', 'EndTime', 'End Time', toDate],
    ['data', 'STDOUT', 'Data', function(s) { return toDataLink(s, 'out') }],
    ['data', 'STDERR', 'Data', function(s) { return toDataLink(s, 'err') }],
    ['data', 'Replay', 'Data', function(s) { return toDataLink(s && ('/visualizer.html?' + s), 'replay') }],
    ['command', 'Command', 'Command', toStr]
  ];

  var makeRow = function(i, rowData) {
    var row = $('<tr/>', {'class': 'status-' + rowData['Status']});

    $.each(columns, function(i, col) {
      row.append($('<td/>', {
        'class': col[0],
        html: col[3](rowData[col[1]])
      }));
    });

    return row;
  };

  var makeHeader = function(data) {
    var header = $('<tr/>');
    $.each(columns, function(i, col) {
      // Collapse duplicate headers into one with colspan
      if (i > 0 && col[0] === columns[i-1][0]) {
        var prev = $(':last-child', header);
        prev.attr('colspan', (parseInt(prev.attr('colspan') || 1) + 1));
      } else {
        header.append($('<th/>', {'class': col[0], text: col[2]}));
      }
    });

    return header;
  };

  var filterRows = function() {
    var rows = $('#sims-list tr:not(:first-child)');
    var shown = 0;

    rows.removeClass('even');
    rows.removeClass('odd');
    rows.removeClass('visible');

    rows.each(function(i, r) {
      var row = $(r);
      var show = filterStatus(row)
        && filterCommand(row);

      if (show) {
        row.addClass('visible');
        row.addClass(shown % 2 == 0 ? 'even' : 'odd');
        shown++;
      }
    });

    $('#shown-count').text(shown);
    $('#total-count').text(rows.length);
  };

  var filterStatus = function(row) {
    var m = (' ' + row.attr('class') + ' ').match(/ status-(\w+) /);
    if (m) {
      var rowStatus = m[1];

      // If the filter with the same status of the row is unchecked,
      // that means we shouldn't show the row and so should return false.
      var matchedFilter = $('.filter-status:not(:checked)[value="' + rowStatus + '"]');

      return matchedFilter.length == 0
    }

    return true;
  };

  var filterCommand = function(row) {
    var filter = $('#filter-command').val() || '';
    filter = filter.trim();

    var cmd = $('.command', row).text().trim();

    if (filter !== '' && cmd) {
      var re = new RegExp(filter);
      return re.test(cmd);
    }

    return true;
  };

  var setup = function() {
    var statuses = catjs.queryParam('status');

    var statusFilters = $('.filter-status');

    if (statuses) {
      statuses = statuses.split(',');

      statusFilters.each(function(i, f) {
        if (statuses && statuses.indexOf(f.value) < 0) {
          f.checked = false;
        }
      });
    }

    statusFilters.change(filterRows);

    var cmdFilter = $('#filter-command');
    cmdFilter.val(catjs.queryParam('command') || '');
    cmdFilter.on('input', filterRows);
  };

  return {
    update: function() {
      var aut = new catjs.AutoUpdatingTable('#sims-list',
          '/data/simulations.json', makeHeader, makeRow);

      aut.afterUpdate = filterRows;
      aut.start();
    },
    setup: setup
  };
}();
